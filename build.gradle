buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://repo.grails.org/grails/core"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:$webdriverBinariesGradleVersion"
        classpath "org.grails.plugins:hibernate5:7.1.0.RC3"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
        classpath "org.grails.plugins:views-gradle:$jsonViewsVersion"
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

version "0.1"
group "metadataconsulting.co"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin: "com.github.erdi.webdriver-binaries"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin: "org.grails.plugins.views-json"
apply plugin: "com.moowork.node"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    jcenter()
    maven { url 'http://dl.bintray.com/agorapulse/libs' }
}

node {
    // Version of node to use.
    version = '5.12.0'

    // Version of npm to use.
    npmVersion = '3.8.6'

    download = true
}

task npmCacheConfig(type: NpmTask, dependsOn: nodeSetup) {
    description = "Configure the NPM cache"
    def npmCacheDir = "${gradle.getGradleUserHomeDir()}/caches/npm"
    outputs.files file(npmCacheDir)
    args = [ 'config', 'set', 'cache', npmCacheDir ]
}

task npmPackages(type: NpmTask, dependsOn: npmCacheConfig) {
    description = "Install Node.js packages"
    args = [ 'install' ]
    inputs.files file('package.json')
    outputs.files file('node_modules')
}

task copyCSS(type: Copy) {
    from "grails-app/assets/javascripts/bower_components/selectize/dist/css/selectize.css", "grails-app/assets/javascripts/bower_components/bootstrap/dist/css/bootstrap.css"
    into "grails-app/assets/stylesheets/css_bower_components"
}
task bowerInstall(type: NodeTask) {
    description = "Resolves Bower dependencies"
    script = file('node_modules/bower/bin/bower')
    args = ["--config.storage.cache=${gradle.getGradleUserHomeDir()}/caches/bower/cache",
            "--config.storage.packages=${gradle.getGradleUserHomeDir()}/caches/bower/packages",
            "--config.storage.registry=${gradle.getGradleUserHomeDir()}/caches/bower/registry",
            'install']
    inputs.files file('bower.json')
    outputs.files file('grails-app/assets/javascripts/bower_components')
    dependsOn npmPackages
    finalizedBy copyCSS
}


dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.5.7.Final"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"

    runtime "mysql:mysql-connector-java:$mysqlVersion"

    // DROOLS
    compile "org.drools:drools-core:$droolsVersion"
    compile "org.drools:drools-compiler:$droolsVersion"
    compile 'com.sun.xml.bind:jaxb-xjc:2.3.0'

    compile "com.squareup.okhttp3:okhttp:$okHttpVersion"
    compile "com.squareup.moshi:moshi:$moshiVersion"

    // Excel
    compile "org.apache.poi:poi:$poiVersion"
    compile "org.apache.poi:poi-ooxml:$poiVersion"

    compile "org.grails.plugins:views-json:$jsonViewsVersion"

    testRuntime "com.h2database:h2"

    testCompile "com.stehno.ersatz:ersatz:$ersatzVersion:safe@jar"
    testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"

    compile "builders.dsl:spreadsheet-builder-poi:$spreadsheetBuilderVersion"
    compile "builders.dsl:spreadsheet-builder-groovy:$spreadsheetBuilderVersion"
    compile "org.grails.plugins:spring-security-core:$springSecurityCoreVersion"

    compile "com.github.mpkorstanje:simmetrics-core:$simmetricsVersion"

    compile "org.grails.plugins:aws-sdk-s3:$awsSdkS3Version"
}

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

webdriverBinaries {
    chromedriver "${chromedriverVersion}"
    geckodriver "${geckodriverVersion}"
}

test {
    systemProperties System.properties
}

integrationTest {
    systemProperties System.properties
}

tasks.withType(Test) {
    systemProperties System.properties
    systemProperty "grails.env", 'test'
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    beforeTest { descriptor -> logger.quiet " -- $descriptor" }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat 'full'
    }
}

assets {
    minifyJs = true
    minifyCss = true
}
